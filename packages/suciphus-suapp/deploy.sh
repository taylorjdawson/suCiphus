#!/bin/bash

# OPENAI_API_KEY should be present here:
source ../../apps/admin/.env

# check env
checkEnv() {
    if [ -z "$1" ]; then
        echo "$2 is not set. Please set it in your environment before re-running the script."
        exit 1
    fi
}
checkEnv "$OPENAI_API_KEY" "OPENAI_API_KEY"

# Run the build and deployment command, capture the output
output=$(suave-geth spell deploy ./Suciphus.sol:Suciphus 2>&1 | tee /dev/tty)

# Extract the deployed address from the output
deployed_address=$(echo "$output" | grep 'Contract deployed' | awk -F 'address=' '{print $2}')

# Check if the deployed_address is captured
if [ -z "$deployed_address" ]
then
    echo "Deployment failed or address not found."
    exit 1
else
    echo "Contract deployed to address: $deployed_address"
fi

# Get the ABI from the JSON file
abi=$(jq '.abi' ./out/Suciphus.sol/Suciphus.json)

# Check if the ABI is captured
if [ -z "$abi" ]
then
    echo "ABI not found."
    exit 1
else
    echo "ABI extracted successfully."
fi

mkdir -p src
cd src

# Write the address and ABI to suciphus.ts
echo "// generated by deploy.sh
import { Address } from \"viem\"

export const suciphus = {
  address: \"$deployed_address\" as Address,
  abi: $abi
}" > suciphus.ts

echo "Address and ABI written to /src/suciphus.ts"

# set API key by calling the contract with suave-geth spell
echo "Uploading OpenAI API key to SUAVE..."
suave-geth spell conf-request --confidential-input $OPENAI_API_KEY $deployed_address "registerAPIKeyOffchain()"